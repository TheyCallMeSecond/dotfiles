
	
<p>
Commercial software is usually good at doing one thing really well. You can write documents in LibreOffice or Word. You can create presentation slides in PowerPoint or Keynote and manage tasks in Trello or Todoist. The problem is that every time you switch context in your workflow, you need to learn and use another piece of software. If you are lucky, the developers let you change the configuration to modify how the software behaves and optimise your workflow. However, in most cases, you are stuck with the choices that developers made for you.</p>
<p>
Emacs does not have these limitations. You undertake most tasks in one program, and almost everything in the system is configurable. This article explains the basics of how to configure Emacs to create a fully personalised productivity suite.</p>
<p>
While using commercial software is like renting a fully-furnished house, using Emacs is more like owning a house. However, your digital home does need some paint, new carpets and furniture to make it your home. A freshly-installed Emacs system can be daunting to configure to your specific needs.</p>
<p>
Some Emacs users use pre-configured systems, such as <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>,  or <a href="https://github.com/syl20bnr/spacemacs/tree/develop">Spacemacs</a>, or one of the other <a href="https://www.emacswiki.org/emacs/StarterKits">starter kits</a>. While these configurations are helpful, they sometimes provide &#39;everything but the kitchen sink&#39;. On the other side of the spectrum, you can configure your system from scratch, which can become a productivity sink as you wade your way through sometimes incomprehensible instructions.</p>
<p>
Within the Emacs community, every now and then a discussion emerges about the need to make so many changes to the vanilla software to get the software to behave you like it to. While this might seem like a reasonable question. the freedom that Emacs provides means that no two systems will be exactly the same. Any choice of setting involves preferences, so the Emacs developers only maintain a skeleton system to get you started.</p>
<p>
This article is part of a series on how to use <a href="https://lucidmanager.org/productivity/more-productive-with-emacs/">Emacs to become more productive</a>. If you are new to Emacs, then feel free to read any of the previous articles. You can download the complete configuration file for the articles on this website from GitHub.</p>
<p>
<a href = "https://github.com/pprevos/EmacsLife" target="_blank"
   title="Download the code from GitHub"
   alt="Download the code from GitHub">
  <button class="button is-medium is-primary">
    <span class="icon is-large">
      <i class="fab fa-github"></i>
    </span>
    <span>Download from GitHub</span>
  </button>
</a>
</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Emacs Lisp
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>Commercial software provides graphical menus to define how the software operates. You might tick a box, select an item in a list, or enter a value in a text box to configure the program to your wishes, like the one below. </p>
<figure>
<div class="tile is-ancestor">
  <div class="tile is-12 is-horizontal is-parent">
    <div class="tile is-child box">
      <div class="field">
	<label class="label">Inhibit startup message</label>
	<div class="control">
	  <label class="checkbox">
	    <input type="checkbox" name="question" checked>
	  </label>
	</div>
      </div>
    </div>
        <div class="tile is-child box">
      <div class="field">
	<label class="label">Initial scratch message</label>
        <textarea class="textarea" rows="2" placeholder="Hello world"></textarea>
      </div>
    </div>
    <div class="tile is-child box">
      <div class="field">
	<label class="label">Cursor Type</label>
	<div class="select">
	  <select name=”color”>
	    <option value=”nil”>Nil</option>
	    <option value=”box”>Box</option>
	    <option value=”hollow”>Hollow</option>
	    <option value=”bar”>Bar</option>
	  </select>
	</div>
      </div>
    </div>
  </div>
</div>
<figcaption>
Typical graphical configuration screen.
</figcaption>
</figure>
<p>
As a plain text program, Emacs does not have such facilities but uses a programming language called Lisp. The code below is equivalent to the form shown above.</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">inhibit-startup-message</span> <span style="color:#036;font-weight:bold">t</span>
</span></span><span style="display:flex;"><span>        <span style="color:#963">initial-scratch-message</span> <span style="background-color:#fff0f0">&#34;Hello world&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#963">cursor-type</span> <span style="color:#a60;background-color:#fff0f0">&#39;bar</span>)</span></span></code></pre></div>
</div>
<p>
While the text method is on the surface more complex than ticking boxes and picking a dropdown list, it is far more powerful than a graphical interface. At first instance, writing code to configure your computer might seem not user-friendly because we are so used to the graphical interface. Once you learn how to write simple Emacs Lisp, you will realise that Emacs is, in reality, the most user-friendly system because of the power it gives you over your computer. But with this power comes great responsibility and a learning curve.</p>
<blockquote>
<p>Using Lisp to configure Emacs is the epitome of user-friendliness. You decide how your computer behaves instead of your computer controlling your behaviour.</p>
</blockquote>
<p>
A Lisp program consists of expressions, which are instructions nested between parentheses. Each expression starts with the name of a function, in most cases followed by some parameters.</p>
<p>
The <code class="verbatim">setq</code> function is commonly used to set the content of a parameter. For example, <code class="verbatim">(setq inhibit-startup-message t)</code> has the same effect as ticking a box called &#39;inhibit startup message&#39;, while <code class="verbatim">(setq inhibit-startup-message nil)</code> is the same as removing the tick from that same box. The expression in this example determines whether Emacs will show a startup message when you first open it.</p>
<p>
You don&#39;t have to learn to program Lisp to configure Emacs. The examples on this website provide sensible defaults, and each article provides a fully documented configuration. A lot of Emacs users share their configuration so that you can copy their code. The copy-paste method is a shortcut to learn more about Emacs Lisp, as you can change the settings and explore the results.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
The init file
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>When you start Emacs, it loads the <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html">initialisation file</a>, or init file in short. This file contains Lisp code that loads any additional packages and configures your Emacs system. You can run Emacs without an init file, but you will undoubtedly want to change the defaults.</p>
<p>
The first time you start Emacs, it will create the configuration folder. The init file lives in this folder, which also contains the packages you need to personalise your system. </p>
<p>
Emacs looks for a file called <code class="verbatim">.emacs</code>, <code class="verbatim">.emacs.el</code> or <code class="verbatim">init.el</code>. The dot in front of the file means that it is hidden from view to prevent clutter. Most Emacs documentation talks about your <code class="verbatim">.emacs</code> file. This article uses the <code class="verbatim">init.el</code> filename.</p>
<p>
The location of the configuration folder depends on your operating system and Emacs version. If you are unsure where to store the <code class="verbatim">init.el</code> file, then you can use the Emacs help functionality.</p>
<p>
Type <code class="verbatim">C-h v</code> for help on variables and type <code class="verbatim">user-emacs-directory</code> and enter. The help buffer that now appears provides the correct folder name. You can close this buffer by pressing <code class="verbatim">q</code>.  Save the <code class="verbatim">init.el</code> file to the folder listed here. Your init file will become active after your restart Emacs. You can download the complete configuration file for the articles on this website from GitHub and save it in the user directory.</p>
<p>
<a href = "https://github.com/pprevos/EmacsLife" target="_blank"
   title="Download the code from GitHub"
   alt="Download the code from GitHub">
  <button class="button is-medium is-primary">
    <span class="icon is-large">
      <i class="fab fa-github"></i>
    </span>
    <span>Download from GitHub</span>
  </button>
</a>
</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
Your first configuration
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>Emacs sometimes automatically writes settings to the init file. To prevent Emacs from changing your hand-crafted config, we can use two separate init files. The configuration below changes the automated configuration file&#39;s name to <code class="verbatim">custom.el</code> and loads it when it exists.</p>
<p>
The line that starts with two semi colons is a comment which is not evaluated. Adding comments will help you find your way through your init file as it grows.</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Define the init file</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">custom-file</span> (<span style="color:#06b;font-weight:bold">expand-file-name</span> <span style="background-color:#fff0f0">&#34;custom.el&#34;</span> <span style="color:#963">user-emacs-directory</span>))
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">when</span> (<span style="color:#06b;font-weight:bold">file-exists-p</span> <span style="color:#963">custom-file</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#06b;font-weight:bold">load</span> <span style="color:#963">custom-file</span>))</span></span></code></pre></div>
</div>
<p>
The first line of code instructs Emacs to use a separate file for the internal configuration system (<code class="verbatim">custom.el</code>). The <code class="verbatim">expand-file-name</code> expression adds the filename to the location of the Emacs user directory. This method ensures that the code works on all systems, irrespective of the Emacs user directory location. The second and third line load this file when it exists. As this is the first action in the configuration, your personal init file will override any settings in the custom file.</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
Loading packages
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>The Emacs base system has extensive functionality, but you can also extend its capability with packages. Many people write packages in Emacs Lisp to improve or enhance what the system can do. Developers of these packages can distribute them through a package repository, which are websites that let you easily download and install packages.</p>
<p>
These packages are available in repositories, the two most important ones are:</p>
<ul>
<li>ELPA: <a href="https://elpa.gnu.org/">GNU Emacs Lisp Package Archive</a> — the official package archive, enabled by default.</li>
<li>MELPA: <a href="https://melpa.org/">Milkypostman’s Emacs Lisp Package Archive</a> — Unofficial archive.</li>
</ul>
<p>You can also download Lisp files directly from GitHub or other sources, but we’ll stick with using the package manager for convenience.</p>
<p>
Emacs has a built-in package manager, which does the job quite well. John Wiggle has developed the <code class="verbatim">use-package</code> software, which simplifies configuring packages. Most configurations on this website use this method to install and configure Emacs extensions.</p>
<p>
The next blob of Lisp code adds the MELPA archive to the packages archive list. The second part checks whether <code class="verbatim">use-package</code> is already installed. If that is not the case, Emacs will download the software from the relevant repository and install it. The last two lines activate <code class="verbatim">use-package</code> and set a variable that instructs it to ensure that any missing packages are automatically installed.</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Define and initialise package repositories</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">require</span> <span style="color:#a60;background-color:#fff0f0">&#39;package</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">add-to-list</span> <span style="color:#a60;background-color:#fff0f0">&#39;package-archives</span> <span style="color:#333">&#39;</span>(<span style="background-color:#fff0f0">&#34;melpa&#34;</span> <span style="color:#333">.</span> <span style="background-color:#fff0f0">&#34;https://melpa.org/packages/&#34;</span>) <span style="color:#036;font-weight:bold">t</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">package-initialize</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#888">;; use-package to simplify the config file</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">unless</span> (<span style="color:#963">package-installed-p</span> <span style="color:#a60;background-color:#fff0f0">&#39;use-package</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#963">package-refresh-contents</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#963">package-install</span> <span style="color:#a60;background-color:#fff0f0">&#39;use-package</span>))
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">require</span> <span style="color:#a60;background-color:#fff0f0">&#39;use-package</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">use-package-always-ensure</span> <span style="color:#a60;background-color:#fff0f0">&#39;t</span>)</span></span></code></pre></div>
</div>
<p>
This is the basic setup you need to run any of the other configurations in this series of articles.</p>
<p>
Packages are constantly improved. You can refresh the list of packages with the <code class="verbatim">list-packages</code> function. This function has no keyboard shortcut, so you will need to first press <code class="verbatim">M-x</code> and type the function name, followed by the ENTER key.</p>
<p>
After the list has been updated, you can upgrade your installed packages by pressing <code class="verbatim">U</code> and <code class="verbatim">x</code>. Emacs will download the package sources and compile them. You might have to remove some packages with the <code class="verbatim">package-autoremove</code> function when requested.</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
Improving the User Interface
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p>The default user interface is a bit of a hybrid between keyboard and mouse-driven operations. While using the mouse might seem convenient, a keyboard-driven system is a lot more efficient because you don&#39;t have to move your hand that much and switch context when finding icons.</p>
<p>
The initial settings in Emacs are not aesthetically appealing. Emacs is an ugly duckling that you can configure into your own beautiful swan.</p>
<p>
This next code snippet shows how to modify the Emacs interface to remove any distractions. The first line inhibits the splash or startup screen. The following three lines remove the tool, menu and scroll bars because we don&#39;t need these in a keyboard-driven system.</p>
<p>
If you like to see the effect of each of these lines of code, the place your cursor at the end of each line and press <code class="verbatim">C-x C-e</code> to evaluate the expression. You have to place the cursor after the closing parenthesis, not between them. To evaluate all code in a buffer, run <code class="verbatim">M-x eval-buffer</code>.</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Keyboard-centric user interface</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">inhibit-startup-message</span> <span style="color:#036;font-weight:bold">t</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">tool-bar-mode</span> <span style="color:#00d;font-weight:bold">-1</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">menu-bar-mode</span> <span style="color:#00d;font-weight:bold">-1</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">scroll-bar-mode</span> <span style="color:#00d;font-weight:bold">-1</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defalias</span> <span style="color:#a60;background-color:#fff0f0">&#39;yes-or-no-p</span> <span style="color:#a60;background-color:#fff0f0">&#39;y-or-n-p</span>)</span></span></code></pre></div>
</div>
<p>
If you are only just beginning with Emacs, then perhaps keeping the menu bar might be a good idea as it is a nice way to explore possible options. This configuration removes the menu bar, but you can still access it by pressing <code class="verbatim">F10</code> and select menu options with the arrow keys and <code class="verbatim">ENTER</code>. You exit the menu with <code class="verbatim">C-g</code>. But after using Emacs for a while you&#39;ll quickly build muscle memory and revert to keyboard shortcuts.</p>
<p>
Emacs has the slighly paternalistic habbit of asking for confirmation with either <code class="verbatim">y / n</code> or with <code class="verbatim">yes / no</code>, cepending on the situation. The basic philosophy is that typing the full word prevent accidentally killing unsave buffers. While this funtionality is a nice gesture, I don use it. The last line sets all yes / no confirmations to a one-letter abrreviation.</p>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Themes
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>Emacs uses themes to defines colours and fonts. Colours in a text editor play a different role to colours in a WYSIWYG word processor. Colours in Emacs are sematic, which mean that they indicate they type of text. A heading might get a different colour than the text or metadata.</p>
<p>
This does not mean that when you export your writing to a website or PDF that the text will have these colours. They are just a means to organise the screen.</p>
<p>
There exist two basic categories of themes, those with a dark or a light background. Themes with light backgrounds, as is common with most modern word processing software, can cause asthenopia (eye-strain) after you stare at the screen for a while. Many Emacs users therefore prefer dark themes.</p>
<p>
The code snippet installs and activates the Exotica theme, which adds a bit of colour to your screen. A theme is a set of instructions that defines the colours of headings and other parts of the text.</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Theme</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">use-package</span> <span style="color:#963">exotica-theme</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:config</span> (<span style="color:#963">load-theme</span> <span style="color:#a60;background-color:#fff0f0">&#39;exotica</span> <span style="color:#036;font-weight:bold">t</span>))</span></span></code></pre></div>
</div>
<p>
Emacs has access to a lot of themes, and you should browse the <a href="https://emacsthemes.com/">Themes Gallery</a> to pick your favourite. If the theme is available in the repositories, you can simply change the last two lines to match the name of your favourite theme.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
Learning more
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p>The best way to learn how to configure your Emacs system is to search the web for examples and copy them to your init file. The code might look like gibberish at first, but will become clearer as you start doing this more often.</p>
<p>
Emacs has an extensive help system that you can use to explore functions or variables you like to know more about. Use the <code class="verbatim">C-h a</code> keyboard shortcut (<code class="verbatim">apropos</code>) to search for any function or variable. </p>
<p>
David Wilson of System Crafters has developed a series of in-depth YouTube videos about crafting your Emacs system, which I highly recommend.</p>
<figure>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/74zOY-vgkyw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<figcaption>
Emacs From Scratch #1 - Getting Started with a Basic Usable Configuration.
</figcaption>
</figure>
<p>
The next article dives into getting productive with Emacs by explaining how implement <a href="https://lucidmanager.org/productivity/emacs-completion-system/">completion systems</a> to help you find files and buffers and save some time with typing and finding stuff.</p>
<p>
Emacs is a malleable system, so everybody will have their personal preferences of how to undertake a task. Any article on how to be productive with Emacs is thus opinionated. If you have a different way of doing things, please share your views and leave a comment below, or complete the <a href="https://lucidmanager.org/contact/">contact form</a> to send me an email.</p>
</div>
</div>

      