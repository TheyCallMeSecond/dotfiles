
	
<p>
When I developed my first website, I wrote HTML in a simple text editor. When I first heard of WordPress, I thought it was the best thing since sliced bread because it allowed me to create websites without managing individual HTML and CSS pages.</p>
<p>
Unfortunately, WordPress has become bloated, and the online editor is not a productive tool to write text. Last year I thus decided to farewell WordPress use Emacs Org mode and Hugo to develop websites.</p>
<p>
A major disadvantage of WordPress is that you write your text in the browser. The advantage of using Emacs and Org mode to maintain a website is that your content are plain text files. You also get to use the incredible editing powers of Emacs.</p>
<p>
Another reason to ditch WordPress is that static websites are much faster because there is no database that generates pages. A static website generator creates pages in plain HTML that are faster to render than a database-driven website, improving the user experience.</p>
<p>
This website is entirely created with Emacs Org mode and Hugo, and this post explains how you can do the same.</p>
<p>
This article is part of a series on how to use <a href="https://lucidmanager.org/productivity/more-productive-with-emacs/">Emacs to become more productive</a>. If you are new to Emacs, then feel free to read any of the previous articles.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Org mode
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>Org mode is a markdown language which means that everything is in plain text format. This approach provides a much higher level of focus for your writing because it emphasises content over formatting. Text editors are not like What-You-See-Is-What-You-Get editors, but use a different approach. You write the article in plain text and when you publish the website, the content is processed with a template. The image below shows this artile as I am writing it and what it eventually looks like in the browser.</p>
<figure>
<img src="https://lucidmanager.org/images/emacs/wysiwym.jpg" alt="The WYSIWYM approach with Emacs Org Mode and Hugo." title="The WYSIWYM approach with Emacs Org Mode and Hugo."/>
<figcaption>
The WYSIWYM approach: Left, an article in Emacs. Right: The exported result.
</figcaption>
</figure>
<p>
Emacs can create simple websites with the default Org mode export function. While this function has a powerful option to use CSS templates, it is not a fully-fledged static website generator, that is why I use Hugo to generate HTML files.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Hugo static website generator
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>The Hugo static website generator converts a collection of Markdown or Org mode files to a website using the Go language. Static websites have at least three advantages over database-driven systems, such as WordPress:</p>
<ul>
<li>Faster website due to static content (no need to access a database)</li>
<li>Writing web pages offline with your favourite editor</li>
<li>Your content remains in plain text</li>
<li>No dependence on third-party paid plugins</li>
</ul>
<p>You can use Hugo with Emacs out-of-the-box. The <a href="https://github.com/niklasfasching/go-org">go-org</a> library by Niklas Fasching forms part of Hugo, so you do not need to update your <a href="https://lucidmanager.org/productivity/configure-emacs/">init file</a>. </p>
<p>
You will need to install the Hugo software, create an empty site and download a theme before starting. The <a href="https://gohugo.io/getting-started/quick-start/">Quick Start guide for Hugo</a> provides detailed instructions. When you get to step four, come back to this article to find out how to use Org Mode to add some content.</p>
<p>
The video series by Mick Dane embedded below provides a comprehensive introduction to using Hugo.</p>
<figure>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/qtIqKaDlqXo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<figcaption>
Introduction to Hugo by Mick Dane.
</figcaption>
</figure>
<p>
All you need to do now is start writing pages in Org mode or Markdown in the <code class="verbatim">content</code> folder. Emacs can also help you with Markdown, but that is outside the scope of this article.</p>
<p>
The theme for this website is optimised for working directly with Org mode files in Hugo. You can download the theme from GitHub. The <a href="https://themes.gohugo.io/">Hugo website</a> provides access to a large collection of themes. Changing the look and feel of your website is as easy as changing theme.</p>
<p>
<a href = "https://github.com/pprevos/hugo-thirdhemisphere" target="_blank"
   title="Download the code from GitHub"
   alt="Download the code from GitHub">
  <button class="button is-medium is-primary">
    <span class="icon is-large">
      <i class="fab fa-github"></i>
    </span>
    <span>Download from GitHub</span>
  </button>
</a>
</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
Using Org Mode and Hugo
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>The Hugo website does not provide much information about using Org mode. The go-org website has a <a href="https://niklasfasching.github.io/go-org/#lists.org">detailed overview</a> of Org mode syntax and how Hugo renders the HTML.</p>
<p>
The Org mode module in Hugo perfectly parses your org files, but there are some special considerations. </p>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
Front Matter
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>Each Org mode file starts with front matter containing the title, author, date, and other metadata for your blog post. You can add non-standard variables, which you can use in your Hugo shortcodes or partials, for example:</p>
<div class="src src-org">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-org" data-lang="org"><span style="display:flex;"><span>  #+title: Post title
</span></span><span style="display:flex;"><span>  #+author: Post author
</span></span><span style="display:flex;"><span>  #+lastmod: [2021-03-04 Thu 12:37]
</span></span><span style="display:flex;"><span>  #+categories[]: emacs hugo org-mode
</span></span><span style="display:flex;"><span>  #+draft: true
</span></span><span style="display:flex;"><span>  #+variable: value
</span></span><span style="display:flex;"><span>  #+list[]: value_1 value_2 value_3</span></span></code></pre></div>
</div>
<p>
Any line that does not start with <code class="verbatim">#+</code> ends the front matter.</p>
<p>
Keyword values can be either strings (<code class="verbatim">#+key: value</code>), or a whitespace-separated list of strings (<code class="verbatim">#+key[]: value_1 value_2</code>). If you need to add a value with two words, you will need to use a hyphen.</p>
<p>
If you are handy with Hugo templates, then you can easily remove the rendered hyphens. Modify your Hugo template files that call the relevant list variables to replace any hyphens with spaces:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>{{ replace . <span style="background-color:#fff0f0">&#34;-&#34;</span> <span style="background-color:#fff0f0">&#34; &#34;</span> }}</span></span></code></pre></div>
</div>
<p>
You can instruct Emacs to automatically add the modification timestamp by adding the following code to your init file:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Update files with last modifed date, when #+lastmod: is available</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">time-stamp-active</span> <span style="color:#036;font-weight:bold">t</span>
</span></span><span style="display:flex;"><span>        <span style="color:#963">time-stamp-start</span> <span style="background-color:#fff0f0">&#34;#\\+lastmod:[ \t]*&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#963">time-stamp-end</span> <span style="background-color:#fff0f0">&#34;$&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#963">time-stamp-format</span> <span style="background-color:#fff0f0">&#34;%04Y-%02m-%02d&#34;</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">add-hook</span> <span style="color:#a60;background-color:#fff0f0">&#39;before-save-hook</span> <span style="color:#a60;background-color:#fff0f0">&#39;time-stamp</span> <span style="color:#036;font-weight:bold">nil</span>)</span></span></code></pre></div>
</div>
<p>
This hook will look for <code class="verbatim">#+lastmod:</code> in your file and add the current date. Hugo will recognise the <code class="verbatim">lastmod</code> variable and if your template supports it, it will insert this date onto your page. Note that this timestamp is not the standard Org mode format as a bug in Hugo does not recognise it in the <code class="verbatim">#+lastmod:</code> variable. Strangle enough, Hugo does recognise Org mode dates in the <code class="verbatim">#+date:</code> variable.</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
Internal Links
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>Org mode includes the ability to link to other pages. The article about <a href="https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/">taking notes with Org-Roam</a> explains the principles of this mechanism in more detail.</p>
<p>
Unfortunately, you cannot use standard Org mode links to files in Hugo for two reasons. Firstly, in Hugo, the slug of a post is not necessarily the same as its filename. You can use the <code class="verbatim">#+slug:</code> variable in the front matter to rename the post. Secondly, the location of the file on your drive might not be the same as it appears in the website.</p>
<p>
Hugo uses the <code class="verbatim">ref</code> shortcode to manage these issues. This shortcode inserts the URL of the post into the link.</p>
<p>
When you move a post to another folder, Hugo will find it and create the appropriate hyperlink. Hugo will throw an error when it cannot find your file during rendering.</p>
<p>
You can create between your pages using standard org mode syntax and the <code class="verbatim">ref</code> Hugo shortcode, which looks like this:</p>
<p>
<code class="verbatim">{{% ref filename.org %}}</code></p>
<p>
Note that you need to use the <code class="verbatim">%</code> delimiter to ensure links work as expected. Use the <code class="verbatim">C-c C-l</code> shortcut (<code class="verbatim">org-insert-link</code>) and enter the shortcode, it enter, and add a description. The source code of the link will look like this:</p>
<div class="src src-org">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-org" data-lang="org"><span style="display:flex;"><span>[[<span style="color:#00c">{{% ref filename.org %}}</span>][<span style="color:#070">Description</span>]]</span></span></code></pre></div>
</div>
<p>
You cannot follow the links within Emacs because these are website links. You will have to render the page to test them.</p>
<p>
To find the filename of the post you want to link to, open the <a href="https://lucidmanager.org/productivity/manage-files-with-emacs/">Dired file manager</a> with <code class="verbatim">C-x d</code> and find your post. Press <code class="verbatim">w</code> to copy the filename, which you can then paste into the link.</p>
<p>
A slightly easier way is to create a new Org mode link type with some Lisp. Add this code to your <a href="https://lucidmanager.org/productivity/configure-emacs/">Emacs configuration</a>:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Follow Hugo links</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">org-hugo-follow</span> (<span style="color:#963">link</span>)
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;Follow Hugo link shortcodes&#34;</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">org-link-open-as-file</span>
</span></span><span style="display:flex;"><span>     (<span style="color:#963">string-trim</span> <span style="background-color:#fff0f0">&#34;{{% ref test.org %}}&#34;</span> <span style="background-color:#fff0f0">&#34;{{% ref &#34;</span> <span style="background-color:#fff0f0">&#34;%}}&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#888">;; New link type for Org-Hugo internal links</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#963">org-link-set-parameters</span>
</span></span><span style="display:flex;"><span>   <span style="background-color:#fff0f0">&#34;hugo&#34;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#007020">:complete</span> (<span style="color:#007020">lambda</span> ()
</span></span><span style="display:flex;"><span>               (<span style="color:#06b;font-weight:bold">concat</span> <span style="background-color:#fff0f0">&#34;{{% ref */&#34;</span>
</span></span><span style="display:flex;"><span>                       (<span style="color:#06b;font-weight:bold">file-name-nondirectory</span>
</span></span><span style="display:flex;"><span>                        (<span style="color:#963">read-file-name</span> <span style="background-color:#fff0f0">&#34;File: &#34;</span>))
</span></span><span style="display:flex;"><span>                       <span style="background-color:#fff0f0">&#34; %}}&#34;</span>))
</span></span><span style="display:flex;"><span>   <span style="color:#007020">:follow</span> <span style="color:#06b;font-weight:bold">#&#39;</span><span style="color:#963">org-hugo-follow</span>)</span></span></code></pre></div>
</div>
<p>
This code creates a link type that concatenates the shortcode text with a chosen filename. Press <code class="verbatim">C-l</code> to create a link and type <code class="verbatim">hugo:</code> and enter. Pick a file, hit enter, provide a label and hit enter one last time. I have not yet figured out how to follow these links in Org mode because they start with the shortcode indicators and not an Org mode link type indicator.</p>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Images
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>The standard image syntax in Org mode works fine, but you will need to link the image to its new destination, not the current one. </p>
<p>
Hugo keeps images in the <code class="verbatim">static</code> folder, so all your image paths assume this folder as the root. Hugo will convert this to the full URL.</p>
<p>
Unfortunately, this means that you cannot preview images because you are linking to the website folder, not the Org mode folder.</p>
<p>
Hugo will parse the usual metadata, such as captions, alternative text, title and width. The example below shows how to style an image with <code class="verbatim">alt</code> and <code class="verbatim">title</code> tags and set its width.</p>
<div class="src src-org">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-org" data-lang="org"><span style="display:flex;"><span>  #+attr_html: alt: Alternative text title: Image Title :width 800
</span></span><span style="display:flex;"><span>  #+caption: Caption text.
</span></span><span style="display:flex;"><span>  [[<span style="color:#00c">/images/file-path.png</span>]]</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Items and Drawers
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<p>The standard Org mode export function can be configured to ignore <code class="verbatim">TODO</code> tags and drawers in the export. Because working with Hugo bypasses the Org Mode export functionality, these tags will appear in your HTML files. The go-org library in Hugo ignores property drawers, but will export the content of other drawers in your file.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-8" class="outline-2">
<h2 id="headline-8">
Deploying your website
</h2>
<div id="outline-text-headline-8" class="outline-text-2">
<p>After you have added some content, you can continue following the instructions on the Hugo Quick Start Guide to run the internal webserver or generate the full website.</p>
<p>
You don’t need to leave Emacs to run these console commands. When you execute the <code class="verbatim">shell</code> function (<code class="verbatim">M-x shell &lt;enter&gt;</code>) you can run Hugo from within Emacs. You will need to execute these files from within the folder that contains your website.</p>
<div class="src src-bash">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo server -D <span style="color:#888"># Run internal web sever, showing draft pages</span></span></span></code></pre></div>
</div>
<p>
All buffers in the <code class="verbatim">content</code> folder need to be saved to disk, otherwise Hugo will throw an error.</p>
</div>
</div>
<div id="outline-container-headline-9" class="outline-2">
<h2 id="headline-9">
Using ox-hugo
</h2>
<div id="outline-text-headline-9" class="outline-text-2">
<p>The <a href="https://ox-hugo.scripter.co/">ox-hugo</a> package in Emacs can act as an intermediary between Org mode and Hugo. This package essentially converts the Org files in your content folder into Markdown files, which Hugo will render.</p>
<p>
This package has some advantages over using the plain Org mode method. Firstly, images and links behave the way you expect them to do. Secondly, you can write your whole website into one large Org mode file.</p>
<p>
I don’t use ox-hugo because it duplicates my content, and it adds an additional step to my workflow. The minor limitations of the native Org mode rendering in Hugo have not prevented me from maintaining my websites. But, Emacs is a matter of choice, so feel free to use ox-hugo.</p>
</div>
</div>
<div id="outline-container-headline-10" class="outline-2">
<h2 id="headline-10">
Exporting your WordPress website
</h2>
<div id="outline-text-headline-10" class="outline-text-2">
<p>Moving a large WordPress website to Hugo can be a large task, that can be semi-automated. You can export the content from WordPress to a CSV file to convert the content to either Org mode or Markdown. I written some scripts in R (the programming language I know best) to <a href="https://lucidmanager.org/data-science/export-wordpress-to-hugo/">export my former WordPress websites</a>.</p>
<p>
All the configuration explained in this series of articles is available as an init file on GitHub.</p>
<p>
<a href = "https://github.com/pprevos/EmacsLife" target="_blank"
   title="Download the code from GitHub"
   alt="Download the code from GitHub">
  <button class="button is-medium is-primary">
    <span class="icon is-large">
      <i class="fab fa-github"></i>
    </span>
    <span>Download from GitHub</span>
  </button>
</a>
</p>
<p>
The next article in this series discusses how to <a href="https://lucidmanager.org/productivity/publishing-with-org-mode-export/">publish articles and books with Org mode</a>.</p>
<p>
Emacs is a malleable system, so everybody will have their personal preferences of how to undertake a task. Any article on how to be productive with Emacs is thus opinionated. If you have a different way of doing things, please share your views and leave a comment below, or complete the <a href="https://lucidmanager.org/contact/">contact form</a> to send me an email.</p>
</div>
</div>

      